// This is an example cache system definition file that can be automatically compiled into a cache implementation

namespace example;

const AddrWidth = 48;    // 48b addr
const BlockOffset = 6;   // 64B cache block
const L1IW = 6;          // L1 64 sets
const L1WN = 8;          // L1 8 ways
const L1TagOffset = 12;
const L2IW = 9;          // L1 512 sets
const L2WN = 8;          // L1 8 ways
const L2TagOffset = 15;
const LLCIW = 10;        // LLC 1024 sets
const LLCWN = 16;        // LLC 16 ways
const LLCTagOffset = 6;  // random index
const LLCPartitionN = 2; // LLC skew partitions

// optimal options
const EnableDelay   = true;  // enable delay estimation
const EnableMonitor = false; // disable pfc monitoring

// do we simulate data
// type data_type        = void;
type data_type        = Data64B();

// initiate the L1 cache
type l1_metadata_type = MetadataMSI(AddrWidth, L1IW, L1TagOffset);
type l1_indexer_type  = IndexNorm(L1IW, BlockOffset);
type l1_replacer_type = ReplaceLRU(L1IW, L1WN);
type l1_delay_type    = DelayL1(1, 3, 8); // 1 cycle hit, 3 cycles for replay, and 8 cycles for block transfer
type l1_type          = CacheNorm(L1IW, L1WN, l1_metadata_type, data_type, l1_indexer_type, l1_replacer_type, l1_delay_type, false);
type l1_inner_type    = CoreInterfaceMSI(l1_metadata_type, data_type, EnableDelay, false);
type l1_outer_type    = OuterPortMSI(l1_metadata_type, data_type);     // support reverse probe
type l1_cache_type    = CoherentL1CacheNorm(l1_type, l1_outer_type, l1_inner_type);
create l1 = l1_cache_type[8]; // 8 L1 caches

// initiate the L2 cache
type l2_metadata_type = MetadataMSI(AddrWidth, L2IW, L2TagOffset);
type l2_indexer_type  = IndexNorm(L2IW, BlockOffset);
type l2_replacer_type = ReplaceLRU(L2IW, L2WN);
type l2_delay_type    = DelayCoherentCache(4, 8, 20); // 4 cycles for hit, 8 cycles for grant to inner, and 20 cycles for writeback to outer
type l2_type          = CacheNorm(L2IW, L2WN, l2_metadata_type, data_type, l2_indexer_type, l2_replacer_type, l2_delay_type, false);
type l2_inner_type    = InnerPortMSIBroadcast(l2_metadata_type, data_type, false);
type l2_outer_type    = OuterPortMSI(l2_metadata_type, data_type);     // support reverse probe
type l2_cache_type    = CoherentCacheNorm(l2_type, l2_outer_type, l2_inner_type);
create l2 = l2_cache_type[4]; // 4 L2 caches

// initiate the llc
type llc_metadata_type = MetadataMSI(AddrWidth, 0, LLCTagOffset);
type llc_indexer_type  = IndexSkewed(LLCIW, BlockOffset, LLCPartitionN);
type llc_replacer_type = ReplaceLRU(LLCIW, LLCWN);
type llc_delay_type    = DelayCoherentCache(8, 20, 40); // 8 cycles for hit, 20 cycles for grant to inner, and 40 cycles for writeback to outer
type llc_type          = CacheSkewed(LLCIW, LLCWN, LLCPartitionN, llc_metadata_type, data_type, llc_indexer_type, llc_replacer_type, llc_delay_type, EnableMonitor);
type llc_inner_type    = InnerPortMSIBroadcast(llc_metadata_type, data_type, true);
type llc_outer_type    = OuterPortMSIUncached(llc_metadata_type, data_type);
type llc_cache_type    = CoherentCacheNorm(llc_type, llc_outer_type, llc_inner_type);
create llc = llc_cache_type;
//create llc = llc_cache_type[4]; // 4 shared llc slices

// LLC dispatcher
type llc_hash_func       = LLCHashHash();
type llc_dispatcher_type = SliceDispatcher(4, llc_hash_func);
create llc_dispatcher    = llc_dispatcher_type;

// initiate memory
type memory_delay_type = DelayMemory(100); // 100 cycles for grant to inner
type memory_type       = SimpleMemoryModel(data_type, memory_delay_type);
create mem = memory_type;

// connect the two levels
connect l1[1:0] -> l2[0];
connect l1[3:2] -> l2[1];
connect l1[5:4] -> l2[2];
connect l1[7:6] -> l2[3];
connect l2 -> llc;
connect llc -> mem;

// toDo: attach PFC
//create pfc = PFCMonitor;
//attach pfc -> llc;
