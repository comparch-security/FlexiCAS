namespace mirage;

const AddrWidth = 64;    // 64b addr
const BlockOffset = 6;   // 64B cache block
const L1IW = 6;          // L1 64 sets
const L1WN = 8;          // L1 8 ways
const L1TagOffset = 12;

const LLCPartitionN = 2; // LLC skew partitions
const LLCIW = 14;        // LLC 1024 sets
const LLCWN = 8;         // LLC every skew 8 ways 
const LLCWE = 6;         // LLC every skew 6 ways extra
const LLCWS = 14;        // LLC every skew 8 + 6 = 14 ways all
const LLCTagOffset = 6;  // random index
const LLCWD = 16;        // LLC data ways is LLCPartitionN(2) * LLCWN(8) = 16 
const LLCRW = 2;         // Cuckoo max relocation 

// optimal options
const EnableDelay      = false;  // disable delay estimation
const EnableMonitor    = false;  // disable pfc monitoring
const EnableRelocation = true;  // disable cuckoo relocation

type data_type         = Data64B();

// initiate the L1 cache
type l1_metadata_type   = MetadataMSI(AddrWidth, L1IW, L1TagOffset);
type l1_indexer_type    = IndexNorm(L1IW, BlockOffset);
type l1_replacer_type   = ReplaceLRU(L1IW, L1WN);
type l1_delay_type      = void;
type l1_type            = CacheNorm(L1IW, L1WN, l1_metadata_type, data_type, l1_indexer_type, l1_replacer_type, l1_delay_type, false);
type l1_policy_type     = MSIPolicy(l1_metadata_type, true, false);
type l1_cache_type    = CoherentL1CacheNorm(l1_type);
create l1_policy = l1_policy_type();
create l1 = l1_cache_type(l1_policy)[1]; // 1 L1 caches

// initiate the llc
type llc_metadata_type   = MirageMetadataMSI(AddrWidth, 0, LLCTagOffset);
type llc_datameta_type   = MirageDataMeta();
type llc_m_indexer_type  = IndexSkewed(LLCIW, BlockOffset, LLCPartitionN);
type llc_d_indexer_type  = IndexRandom(LLCIW, BlockOffset);
type llc_m_replacer_type = ReplaceLRU(LLCWS, LLCWN);
type llc_d_replacer_type = ReplaceRandom(LLCIW, LLCWD, false);
type llc_delay_type      = void;
type llc_type            = MirageCache(LLCIW, LLCWN, LLCWE, LLCPartitionN, LLCRW, llc_metadata_type, data_type, llc_datameta_type, llc_m_indexer_type, llc_d_indexer_type, llc_m_replacer_type, llc_d_replacer_type, llc_delay_type, EnableMonitor, EnableRelocation);
type llc_policy_type     = MSIPolicy(llc_metadata_type, false, true);
type llc_outer_type    = OuterCohPortUncached;
type llc_cache_type      = CoherentCacheNorm(llc_type, llc_outer_type);
create llc_policy = llc_policy_type();
create llc = llc_cache_type(llc_policy)[1]; // 1 shared llc slices

// initiate memory
type memory_delay_type = DelayMemory(100); // 100 cycles for grant to inner
type memory_type       = SimpleMemoryModel(data_type, void);
create mem = memory_type;

connect l1[0:0] -> llc[0];
connect llc -> mem;